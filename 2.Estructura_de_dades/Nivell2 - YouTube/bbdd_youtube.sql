-- MySQL Script generated by MySQL Workbench
-- Sun Jan 12 21:28:49 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema youtube
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `youtube` ;

-- -----------------------------------------------------
-- Schema youtube
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `youtube` DEFAULT CHARACTER SET utf8mb4 ;
USE `youtube` ;

-- -----------------------------------------------------
-- Table `youtube`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `youtube`.`usuarios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `pw` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `F_Nacimiento` DATE NOT NULL,
  `sexo` ENUM('H', 'M', 'NB') NOT NULL,
  `pais` VARCHAR(45) NOT NULL,
  `cp` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`videos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`videos` ;

CREATE TABLE IF NOT EXISTS `youtube`.`videos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuario_id` INT NOT NULL,
  `fecha_publicacion` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `titulo` VARCHAR(45) NOT NULL,
  `descripcion` LONGTEXT NOT NULL,
  `tamaño` INT NOT NULL,
  `nombre_archivo` VARCHAR(500) NOT NULL,
  `duracion` TIME NOT NULL,
  `thumbnail` VARCHAR(500) NOT NULL COMMENT 'Ruta url',
  `cantidad_reproducciones` INT NOT NULL DEFAULT 0,
  `cantidad_likes` INT NOT NULL DEFAULT 0,
  `cantidad_dislikes` INT NOT NULL DEFAULT 0,
  `estado` ENUM("Publico", "Oculto", "Privado") NOT NULL DEFAULT 'Privado',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_v_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `youtube`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_v_usuario_id_idx` ON `youtube`.`videos` (`usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`canal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`canal` ;

CREATE TABLE IF NOT EXISTS `youtube`.`canal` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuario_id` INT NOT NULL,
  `fecha_creacion` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_c_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `youtube`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Alias c';

CREATE INDEX `fk_c_usuario_id_idx` ON `youtube`.`canal` (`usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`subscripciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`subscripciones` ;

CREATE TABLE IF NOT EXISTS `youtube`.`subscripciones` (
  `usuario_id` INT NOT NULL,
  `canal_id` INT NOT NULL,
  PRIMARY KEY (`usuario_id`, `canal_id`),
  CONSTRAINT `fk_s_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `youtube`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_s_canal_id`
    FOREIGN KEY (`canal_id`)
    REFERENCES `youtube`.`canal` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Alias s';

CREATE INDEX `fk_s_canal_id_idx` ON `youtube`.`subscripciones` (`canal_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`playlist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`playlist` ;

CREATE TABLE IF NOT EXISTS `youtube`.`playlist` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuario_id` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `fecha_creacion` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `estado` ENUM("publico", "privado") NOT NULL DEFAULT 'privado',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_p_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `youtube`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `fk_p_usuario_id_idx` ON `youtube`.`playlist` (`usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`comentarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`comentarios` ;

CREATE TABLE IF NOT EXISTS `youtube`.`comentarios` (
  `video_id` INT NOT NULL,
  `usuario_id` INT NOT NULL,
  `texto` LONGTEXT NOT NULL,
  `fecha` TIMESTAMP NULL,
  PRIMARY KEY (`video_id`),
  CONSTRAINT `fk_co_video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `youtube`.`videos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_co_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `youtube`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Alias co';

CREATE INDEX `fk_co_usuario_id_idx` ON `youtube`.`comentarios` (`usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`etiquetas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`etiquetas` ;

CREATE TABLE IF NOT EXISTS `youtube`.`etiquetas` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Alias e';


-- -----------------------------------------------------
-- Table `youtube`.`videos_etiquetados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`videos_etiquetados` ;

CREATE TABLE IF NOT EXISTS `youtube`.`videos_etiquetados` (
  `video_id` INT NOT NULL,
  `etiqueta_id` INT NOT NULL,
  PRIMARY KEY (`video_id`, `etiqueta_id`),
  CONSTRAINT `fk_ve_video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `youtube`.`videos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ve_etiqueta_id`
    FOREIGN KEY (`etiqueta_id`)
    REFERENCES `youtube`.`etiquetas` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Alias ve';

CREATE INDEX `fk_ve_etiqueta_id_idx` ON `youtube`.`videos_etiquetados` (`etiqueta_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`reacciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`reacciones` ;

CREATE TABLE IF NOT EXISTS `youtube`.`reacciones` (
  `usuario_id` INT NOT NULL,
  `video_id` INT NOT NULL,
  `reaccion` ENUM("like", "dislike") NULL DEFAULT NULL,
  `fecha_reaccion` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `interaccionescol` VARCHAR(45) NULL,
  PRIMARY KEY (`usuario_id`, `video_id`),
  CONSTRAINT `fk_r_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `youtube`.`usuarios` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_r_video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `youtube`.`videos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Alias r';

CREATE INDEX `fk_r_video_id_idx` ON `youtube`.`reacciones` (`video_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `youtube`.`videos_en_playlist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `youtube`.`videos_en_playlist` ;

CREATE TABLE IF NOT EXISTS `youtube`.`videos_en_playlist` (
  `playlist_id` INT NOT NULL,
  `video_id` INT NOT NULL,
  PRIMARY KEY (`playlist_id`, `video_id`),
  CONSTRAINT `fk_vep_playlist_id`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `youtube`.`playlist` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_vep_video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `youtube`.`videos` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Alias vep';

CREATE INDEX `fk_vep_video_id_idx` ON `youtube`.`videos_en_playlist` (`video_id` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -------------------------------
-- INSERTAR DATOS EN LAS TABLAS
-- -------------------------------

-- Insertar datos en la tabla usuarios
INSERT INTO `youtube`.`usuarios` (`nombre`, `pw`, `email`, `F_Nacimiento`, `sexo`, `pais`, `cp`)
VALUES

('Juan Pérez', 'contrasena123', 'juan.perez@ejemplo.com', '1990-05-12', 'H', 'España', '28001'),
('María López', 'clave456', 'maria.lopez@ejemplo.com', '1985-03-08', 'M', 'México', '64000'),
('Carlos García', 'secreto789', 'carlos.garcia@ejemplo.com', '1995-11-20', 'H', 'Argentina', '1001'),
('Ana Torres', 'pass1234', 'ana.torres@ejemplo.com', '1992-07-15', 'M', 'Chile', '8320000'),
('Marcos', 'cave546', 'marcos@hotmail.com', '2001/12/06', 'H', 'Francia', '40300'),
('Critina', 'pw1234', 'mimail@hotmail.com', '1990/01/09', 'M', 'España', '08056');

-- Insertar datos en la tabla canal
INSERT INTO canal (id, usuario_id, fecha_creacion, nombre, descripcion)
VALUES
(1, 1, '2023-01-01', 'Canal de Juan', 'Un canal sobre tecnología y programación.'),
(2, 2, '2022-05-15', 'Canal de María', 'Tutoriales de cocina casera.'),
(3, 3, '2023-03-20', 'Canal de Carlos', 'Videos de deportes y aventuras.');

-- Insertar datos en la tabla videos
INSERT INTO videos (id, usuario_id, fecha_publicacion, titulo, descripcion, tamaño, nombre_archivo, duracion, thumbnail, cantidad_reproducciones, cantidad_likes, cantidad_dislikes, estado)
VALUES
(1, 1, '2023-01-10', 'Introducción a MySQL', 'Una guía básica para comenzar con MySQL.', 500, 'intro_mysql.mp4', '00:15:30', 'intro_mysql.jpg', 1200, 150, 10, 'Publico'),
(2, 2, '2023-02-01', 'Receta de paella', 'Cómo preparar una deliciosa paella.', 700, 'paella.mp4', '00:20:45', 'paella.jpg', 800, 100, 5, 'Oculto'),
(3, 3, '2023-03-05', 'Partido de fútbol', 'Resumen de un emocionante partido.', 1000, 'futbol.mp4', '00:10:00', 'futbol.jpg', 2000, 300, 15, 'Privado');

-- Insertar datos en la tabla playlist
INSERT INTO playlist (id, usuario_id, nombre, fecha_creacion, estado)
VALUES
(1, 1, 'Mis tutoriales', '2023-01-12', 'publico'),
(2, 2, 'Recetas favoritas', '2023-02-15', 'privado');

-- Insertar datos en la tabla videos_en_playlist
INSERT INTO videos_en_playlist (playlist_id, video_id)
VALUES
(1, 1),
(2, 2);

-- Insertar datos en la tabla etiquetas
INSERT INTO etiquetas (id, nombre)
VALUES
(1, 'Tecnología'),
(2, 'Cocina'),
(3, 'Deportes');

-- Insertar datos en la tabla videos_etiquetados
INSERT INTO videos_etiquetados (video_id, etiqueta_id)
VALUES
(1, 1),
(2, 2),
(3, 3);

-- Insertar datos en la tabla reacciones
INSERT INTO reacciones (usuario_id, video_id, reaccion, fecha_reaccion)
VALUES
(1, 2, 'LIKE', '2023-02-02 12:00:00'),
(2, 1, 'LIKE', '2023-01-11 15:00:00'),
(3, 3, 'DISLIKE', '2023-03-06 10:00:00');

-- Insertar datos en la tabla comentarios
INSERT INTO comentarios (video_id, usuario_id, texto, fecha)
VALUES
(1, 2, 'Muy buen tutorial, gracias!', '2023-01-11 10:00:00'),
(2, 3, 'Me encanta esta receta, la probaré!', '2023-02-02 16:30:00'),
(3, 4, 'Qué buen partido, emocionante!', '2023-03-05 19:00:00');

-- Insertar datos en la tabla suscripciones
INSERT INTO subscripciones (usuario_id, canal_id)
VALUES
(2, 1),
(3, 2),
(4, 3);
